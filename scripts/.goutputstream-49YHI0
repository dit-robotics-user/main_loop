#!/usr/bin/env python

from main_loop.srv import *
import rospy

def replan_path(action_name, a_list):
    penalty = 500
    for action in a_list:
        if action.name is action_name:
            action.priority += penalty


def kill_mission(mission_name, m_list):
    for mission in m_list:
        if mission.name is mission_name:
            m_list.remove(mission)


def kill_same_action_number(path, a_list):
    number = 0
    for action in a_list:
        if action.name is path[-1]:
            if action.iscup is False:
                continue
            number = action.number
    for i in range(len(a_list) - 1, -1, -1):
        if a_list[i].number is number:
            a_list.remove(a_list[i])

def handle_add_two_ints(req):
    print "Returning [%s + %s = %s]"%(req.a, req.b, (req.a + req.b))
    return AddTwoIntsResponse(req.a + req.b)

def add_two_ints_server():
    rospy.init_node('goap_test')
    rospy.Service('goap_test_', AddTwoInts, handle_add_two_ints)
    print "Ready to add two ints."
    
    while len(current_world_state) is not 0:
		path_done = False
		for actions in action_list:
			actions.refresh()
		new_current_world_state = current_world_state.copy()
		mission_list = calculate_mission_priority(mission_list, new_current_world_state, left_side, right_side)
		path = goap([mission_list[0].name], new_current_world_state, my_pos, action_list)
		print('cws:')
		print(new_current_world_state)
		#action_done(p)

		while path_done is False:
			if replan is True:  # means that that cup is currently occupied?
				replan_path(path[0], action_list)
				path_done = True
				continue
			if action_done is True:
				if len(path) > 1:
					path.pop()
				else:
					current_world_state = new_current_world_state

					if path[-1] is 'lighthouse':
						kill_mission('lighthouse', action_list)
					elif path[-1] is 'wind':
						kill_mission('wind', action_list)
					elif path[-1] is 'lift_left':
						left_side += 1
						if left_side >= 3:
							for action in action_list:
								if action.name is 'lift_left':
									action_list.remove(action)
									lift_left_deleted = True
					elif path[-1] is 'lift_right':
						right_side += 1
						if right_side >= 3:
							for action in action_list:
								if action.name is 'lift_right':
									action_list.remove(action)
									lift_right_deleted = True
					elif path[-1] is 'put_cup':
						if lift_left_deleted is True:
							append_list(dont_change_action_list, 'lift_left', action_list)
						if lift_right_deleted is True:
							append_list(dont_change_action_list, 'lift_right', action_list)
					path_done = True
					kill_same_action_number(path, action_list)
					continue
				output = path[0]
    rospy.spin()
    

left_side = 0
right_side = 0
lift_left_deleted = False
lift_right_deleted = False
action_list = []
current_world_state = []
mission_list = []
action_list, current_world_state, mission_list = setting(1, action_list, current_world_state, mission_list, my_pos, my_degree)
dont_change_action_list = action_list.copy()

if __name__ == "__main__":
    add_two_ints_server()
